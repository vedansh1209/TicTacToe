#include<bits/stdc++.h>
using namespace std;
 
#define USER1 1
#define USER2 2
 
#define SIDE 3
 
#define USER1MOVE 'X'
#define USER2MOVE 'O'
 
void showBoard(char board[][SIDE])
{
    printf("\n\n");
     
    printf("\t\t\t  %c | %c  | %c  \n", board[0][0], board[0][1], board[0][2]);
    printf("\t\t\t--------------\n");
    printf("\t\t\t  %c | %c  | %c  \n", board[1][0], board[1][1], board[1][2]);
    printf("\t\t\t--------------\n");
    printf("\t\t\t  %c | %c  | %c  \n\n", board[2][0], board[2][1], board[2][2]);
  
    return;
}
 
void showInstructions()
{
    printf("\t\t\t  Tic-Tac-Toe\n\n");
    printf("Choose a cell numbered from 1 to 9 as below and play\n\n");
     
    printf("\t\t\t  1 | 2  | 3  \n");
    printf("\t\t\t--------------\n");
    printf("\t\t\t  4 | 5  | 6  \n");
    printf("\t\t\t--------------\n");
    printf("\t\t\t  7 | 8  | 9  \n\n");
     
    printf("-\t-\t-\t-\t-\t-\t-\t-\t-\t-\n\n");
 
    return;
}
 
void initialise(char board[][SIDE])
{
    for (int i = 0; i < SIDE; i++)
    {
        for (int j = 0; j < SIDE; j++)
            board[i][j] = ' ';
    }
}
 
void declareWinner(int whoseTurn)
{
    if (whoseTurn == USER1)
        printf("User1 has won\n");
    else
        printf("User2 has won\n");
    return;
}
 
bool rowCrossed(char board[][SIDE])
{
    for (int i = 0; i < SIDE; i++)
    {
        if (board[i][0] == board[i][1] && board[i][1] == board[i][2] && board[i][0] != ' ')
            return (true);
    }
    return (false);
}
 
bool columnCrossed(char board[][SIDE])
{
    for (int i = 0; i < SIDE; i++)
    {
        if (board[0][i] == board[1][i] && board[1][i] == board[2][i] && board[0][i] != ' ')
            return (true);
    }
    return (false);
}
 
bool diagonalCrossed(char board[][SIDE])
{
    if (board[0][0] == board[1][1] && board[1][1] == board[2][2] && board[0][0] != ' ')
        return (true);
         
    if (board[0][2] == board[1][1] && board[1][1] == board[2][0] && board[0][2] != ' ')
        return (true);
 
    return (false);
}
 
bool gameOver(char board[][SIDE])
{
    return (rowCrossed(board) || columnCrossed(board) || diagonalCrossed(board));
}
 
void playTicTacToe()
{
    char board[SIDE][SIDE];
    initialise(board);
    showInstructions();
    int moveIndex = 0, x, y;
    int whoseTurn = USER1;
     
    while (gameOver(board) == false && moveIndex != SIDE * SIDE)
    {
        if (whoseTurn == USER1)
        {
            int cell;
            do {
                printf("User1, enter the cell number (1-9) to place your move: ");
                cin >> cell;
                cell--; // Convert to 0-based index
                x = cell / SIDE;
                y = cell % SIDE;
            } while (cell < 0 || cell >= SIDE * SIDE || board[x][y] != ' ');
            
            board[x][y] = USER1MOVE;
            printf("User1 has put a %c in cell %d\n", USER1MOVE, cell + 1);
            showBoard(board);
            moveIndex++;
            whoseTurn = USER2;
        }
        else if (whoseTurn == USER2)
        {
            int cell;
            do {
                printf("User2, enter the cell number (1-9) to place your move: ");
                cin >> cell;
                cell--; // Convert to 0-based index
                x = cell / SIDE;
                y = cell % SIDE;
            } while (cell < 0 || cell >= SIDE * SIDE || board[x][y] != ' ');
            
            board[x][y] = USER2MOVE;
            printf("User2 has put a %c in cell %d\n", USER2MOVE, cell + 1);
            showBoard(board);
            moveIndex++;
            whoseTurn = USER1;
        }
    }
 
    if (gameOver(board) == false && moveIndex == SIDE * SIDE)
        printf("It's a draw\n");
    else
    {
        if (whoseTurn == USER1)
            whoseTurn = USER2;
        else if (whoseTurn == USER2)
            whoseTurn = USER1;
         
        declareWinner(whoseTurn);
    }
    return;
}
 
int main()
{
    playTicTacToe();
     
    return (0);
}
